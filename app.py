import os
import logging
from dotenv import load_dotenv
load_dotenv()


from flask import Flask, request, redirect, render_template, session
from models import db, init_db, User
from oauth import start_slack_oauth, handle_slack_callback
from scheduler import start_scheduler

logger = logging.getLogger(__name__)


app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///db.sqlite3'
app.secret_key = 'supersecret'
db.init_app(app)

with app.app_context():
    init_db()
    start_scheduler(app)

@app.route('/')
def index():
    return '<a href="/slack/oauth/start">–ü–æ–¥–∫–ª—é—á–∏—Ç—å Slack</a>'

@app.route('/slack/oauth/start')
def slack_oauth_start():
    return start_slack_oauth()

@app.route('/slack/oauth/callback')
def slack_oauth_callback():
    return handle_slack_callback(request)

@app.route('/connect-garmin', methods=["GET", "POST"])
def connect_garmin():
    if "slack_user_id" not in session:
        return redirect("/")

    user = User.query.filter_by(slack_user_id=session["slack_user_id"]).first()
    if request.method == "POST" and user:
        user.garmin_email = request.form["email"]  # –∞–≤—Ç–æ—à–∏—Ñ—Ä—É–µ—Ç—Å—è
        user.garmin_password = request.form["password"]  # –∞–≤—Ç–æ—à–∏—Ñ—Ä—É–µ—Ç—Å—è
        db.session.commit()
        
        # –°—Ä–∞–∑—É –≤—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å Body Battery
        from garmin import get_body_battery
        from slack_api import update_slack_status
        
        if user and user.garmin_email and user.garmin_password and user.slack_access_token:
            logger.info(f"–ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å Body Battery –¥–ª—è {user.garmin_email}")
            battery = get_body_battery(user.garmin_email, user.garmin_password)
            if battery is not None:
                logger.info(f"‚úîÔ∏è –ü–µ—Ä–≤—ã–π Battery = {battery} –¥–ª—è {user.slack_user_id}")
                update_slack_status(user.slack_access_token, battery)
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–≤—ã–π Body Battery –¥–ª—è {user.slack_user_id}")
        else:
            logger.warning("–ù–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ Body Battery")
        
        return redirect("/status")
    return render_template("login.html")

@app.route('/status')
def status():
    if "slack_user_id" not in session:
        return redirect("/")
    user = User.query.filter_by(slack_user_id=session["slack_user_id"]).first()
    if user and user.garmin_email and user.garmin_password:
        return "‚úÖ –í—Å—ë –≥–æ—Ç–æ–≤–æ! –°—Ç–∞—Ç—É—Å –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞."
    else:
        return "‚ùå –ù–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–∫–ª—é—á–∏—Ç–µ Garmin –∏ Slack."

@app.route('/clear-cache')
def clear_cache():
    """–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ —Å–µ—Å—Å–∏–π Garmin"""
    from garmin import clear_session_cache
    clear_session_cache()
    return "üßπ –ö—ç—à —Å–µ—Å—Å–∏–π Garmin –æ—á–∏—â–µ–Ω"

@app.route('/test-battery')
def test_battery():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è Body Battery –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if "slack_user_id" not in session:
        return "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏. –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ Slack."
    
    user = User.query.filter_by(slack_user_id=session["slack_user_id"]).first()
    if not user or not user.garmin_email or not user.garmin_password:
        return "‚ùå Garmin –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ Garmin."
    
    from garmin import get_body_battery
    logger.info(f"–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å Body Battery –¥–ª—è {user.garmin_email}")
    
    battery = get_body_battery(user.garmin_email, user.garmin_password)
    if battery is not None:
        return f"‚úÖ Body Battery: {battery}%"
    else:
        return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ Body Battery. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏."

if __name__ == '__main__':
    if os.environ.get("RENDER"):
        app.run(debug=False, host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))
    else:
        app.run(debug=True, ssl_context=('cert.pem', 'key.pem'))



