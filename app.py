import os
import logging
from dotenv import load_dotenv
load_dotenv()


from flask import Flask, request, redirect, render_template, session
from models import db, init_db, User
from oauth import start_slack_oauth, handle_slack_callback
from scheduler import start_scheduler

logger = logging.getLogger(__name__)


app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///db.sqlite3'
app.secret_key = 'supersecret'
db.init_app(app)

with app.app_context():
    init_db()
    
    # –ú–∏–≥—Ä–∞—Ü–∏—è –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    try:
        users_without_icon_style = User.query.filter(User.icon_style == None).all()
        for user in users_without_icon_style:
            user.icon_style = "classic"
        if users_without_icon_style:
            db.session.commit()
            logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ {len(users_without_icon_style)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
    except Exception as e:
        logger.warning(f"–ú–∏–≥—Ä–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∫–æ–Ω–æ–∫: {e}")
    
    start_scheduler(app)

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/slack/oauth/start')
def slack_oauth_start():
    return start_slack_oauth()

@app.route('/slack/oauth/callback')
def slack_oauth_callback():
    return handle_slack_callback(request)

@app.route('/connect-garmin', methods=["GET", "POST"])
def connect_garmin():
    if "slack_user_id" not in session:
        return redirect("/")

    user = User.query.filter_by(slack_user_id=session["slack_user_id"]).first()
    if request.method == "POST" and user:
        user.garmin_email = request.form["email"]  # –∞–≤—Ç–æ—à–∏—Ñ—Ä—É–µ—Ç—Å—è
        user.garmin_password = request.form["password"]  # –∞–≤—Ç–æ—à–∏—Ñ—Ä—É–µ—Ç—Å—è
        db.session.commit()
        
        # –°—Ä–∞–∑—É –≤—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å Body Battery
        from garmin import get_body_battery
        from slack_api import update_slack_status
        
        if user and user.garmin_email and user.garmin_password and user.slack_access_token:
            logger.info(f"–ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å Body Battery –¥–ª—è {user.garmin_email}")
            battery = get_body_battery(user.garmin_email, user.garmin_password)
            if battery is not None:
                logger.info(f"‚úîÔ∏è –ü–µ—Ä–≤—ã–π Battery = {battery} –¥–ª—è {user.slack_user_id}")
                update_slack_status(user.slack_access_token, battery, user.icon_style)
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–≤—ã–π Body Battery –¥–ª—è {user.slack_user_id}")
        else:
            logger.warning("–ù–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ Body Battery")
        
        return redirect("/status")
    return render_template("login.html")

@app.route('/status')
def status():
    if "slack_user_id" not in session:
        return redirect("/")
    user = User.query.filter_by(slack_user_id=session["slack_user_id"]).first()
    
    success = user and user.garmin_email and user.garmin_password and user.slack_access_token
    battery_level = None
    
    # –ï—Å–ª–∏ –≤—Å–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ, –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –±–∞—Ç–∞—Ä–µ–∏
    if success and user:
        try:
            from garmin import get_body_battery
            battery_level = get_body_battery(user.garmin_email, user.garmin_password)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å Body Battery –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
    
    return render_template('status.html', success=success, battery_level=battery_level, 
                         icon_style=user.icon_style if user else "classic")

@app.route('/clear-cache')
def clear_cache():
    """–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ —Å–µ—Å—Å–∏–π Garmin"""
    from garmin import clear_session_cache
    clear_session_cache()
    
    return render_template('message.html', 
                         title="–ö—ç—à –æ—á–∏—â–µ–Ω",
                         message="üßπ –ö—ç—à —Å–µ—Å—Å–∏–π Garmin —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω",
                         type="success",
                         back_url="/status")

@app.route('/test-battery')
def test_battery():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è Body Battery –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if "slack_user_id" not in session:
        return render_template('message.html',
                             title="–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞",
                             message="‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏. –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ Slack.",
                             type="error",
                             back_url="/")
    
    user = User.query.filter_by(slack_user_id=session["slack_user_id"]).first()
    if not user or not user.garmin_email or not user.garmin_password:
        return render_template('message.html',
                             title="Garmin –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω",
                             message="‚ùå Garmin –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ Garmin.",
                             type="error",
                             back_url="/connect-garmin")
    
    from garmin import get_body_battery
    logger.info(f"–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å Body Battery –¥–ª—è {user.garmin_email}")
    
    battery = get_body_battery(user.garmin_email, user.garmin_password)
    if battery is not None:
        return render_template('message.html',
                             title="Body Battery –ø–æ–ª—É—á–µ–Ω",
                             message=f"‚úÖ –¢–µ–∫—É—â–∏–π Body Battery: {battery}%",
                             type="success",
                             back_url="/status",
                             battery_level=battery)
    else:
        return render_template('message.html',
                             title="–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö",
                             message="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ Body Battery. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.",
                             type="error",
                             back_url="/status")

@app.route('/settings', methods=['POST'])
def update_settings():
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if "slack_user_id" not in session:
        return redirect("/")
    
    user = User.query.filter_by(slack_user_id=session["slack_user_id"]).first()
    if not user:
        return redirect("/")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∏–ª—å –∏–∫–æ–Ω–æ–∫
    icon_style = request.form.get('icon_style', 'classic')
    if icon_style in ['classic', 'doom']:
        user.icon_style = icon_style
        db.session.commit()
        
        return render_template('message.html',
                             title="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã",
                             message=f"‚úÖ –°—Ç–∏–ª—å –∏–∫–æ–Ω–æ–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {'–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π' if icon_style == 'classic' else '–ò–≥—Ä–æ–≤–æ–π (DOOM)'}",
                             type="success",
                             back_url="/status")
    else:
        return render_template('message.html',
                             title="–û—à–∏–±–∫–∞",
                             message="‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∏–ª—å –∏–∫–æ–Ω–æ–∫",
                             type="error",
                             back_url="/status")

if __name__ == '__main__':
    if os.environ.get("RENDER"):
        app.run(debug=False, host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))
    else:
        app.run(debug=True, ssl_context=('cert.pem', 'key.pem'))



