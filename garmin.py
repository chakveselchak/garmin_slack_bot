from garminconnect import (
    Garmin,
    GarminConnectAuthenticationError,
    GarminConnectConnectionError,
    GarminConnectTooManyRequestsError,
)
import logging
import os
import json
import time
import random
import datetime
from requests.exceptions import HTTPError

logging.basicConfig(
    level=logging.DEBUG,
    format='[%(asctime)s] %(levelname)s in %(module)s: %(message)s'
)

logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫—ç—à –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π
_active_sessions = {}
_session_timestamps = {}

def get_cached_api(email, password):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ API –∫–ª–∏–µ–Ω—Ç–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ"""
    global _active_sessions, _session_timestamps
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è
    if email in _active_sessions:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫–ª–∞ –ª–∏ —Å–µ—Å—Å–∏—è (24 —á–∞—Å–∞)
        if time.time() - _session_timestamps.get(email, 0) < 24 * 3600:
            logger.info(f"–ò—Å–ø–æ–ª—å–∑—É—é –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å–µ—Å—Å–∏—é –¥–ª—è {email}")
            return _active_sessions[email]
        else:
            logger.info(f"–°–µ—Å—Å–∏—è –¥–ª—è {email} –∏—Å—Ç–µ–∫–ª–∞, —Å–æ–∑–¥–∞—é –Ω–æ–≤—É—é")
            del _active_sessions[email]
            del _session_timestamps[email]
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
    try:
        logger.info(f"–°–æ–∑–¥–∞—é –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –¥–ª—è {email}")
        api = Garmin(email, password)
        api.login()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
        _active_sessions[email] = api
        _session_timestamps[email] = time.time()
        
        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ —Å–µ—Å—Å–∏—è –¥–ª—è {email}")
        return api
        
    except (
        GarminConnectConnectionError,
        GarminConnectAuthenticationError,
        GarminConnectTooManyRequestsError,
        HTTPError,
    ) as err:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏ –¥–ª—è {email}: {err}")
        return None

def get_body_battery(email, password, max_retries=2):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ Body Battery —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π"""
    
    for attempt in range(max_retries):
        try:
            # –ü–æ–ª—É—á–∞–µ–º API –∫–ª–∏–µ–Ω—Ç (–∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–ª–∏ –Ω–æ–≤—ã–π)
            api = get_cached_api(email, password)
            if not api:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å API –∫–ª–∏–µ–Ω—Ç –¥–ª—è {email}")
                return None
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º
            time.sleep(random.uniform(2, 5))
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ Body Battery –¥–ª—è —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è
            today = datetime.date.today()
            logger.info(f"–ó–∞–ø—Ä–∞—à–∏–≤–∞—é Body Battery –¥–ª—è {email} –Ω–∞ {today}")
            
            battery_data = api.get_body_battery(today.isoformat())
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –±–∞—Ç–∞—Ä–µ–∏
            if battery_data and isinstance(battery_data, dict) and 'bodyBatteryValuesArray' in battery_data:
                # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞ –¥–µ–Ω—å
                values = battery_data.get('bodyBatteryValuesArray', [])
                if values:
                    battery_level = values[-1].get('batteryLevel', 0)
                    logger.info(f"‚úÖ BodyBattery –¥–ª—è {email}: {battery_level}")
                    return battery_level
                else:
                    logger.warning(f"‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö Body Battery –¥–ª—è {email}")
                    return None
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö Body Battery –¥–ª—è {email}")
                return None

        except GarminConnectTooManyRequestsError as e:
            logger.error(f"‚ùå Rate limited –¥–ª—è {email} (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}): {e}")
            
            # –£–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏—é –∏–∑ –∫—ç—à–∞, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ–±–ª–µ–º–Ω–æ–π
            if email in _active_sessions:
                del _active_sessions[email]
                del _session_timestamps[email]
            
            if attempt < max_retries - 1:
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ
                wait_time = random.uniform(300, 600)  # 5-10 –º–∏–Ω—É—Ç
                logger.info(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {wait_time/60:.1f} –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
                time.sleep(wait_time)
                continue
            else:
                logger.error(f"‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è {email}")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ Garmin –¥–ª—è {email} (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}): {e}")
            
            # –£–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏—é –∏–∑ –∫—ç—à–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            if email in _active_sessions:
                del _active_sessions[email]
                del _session_timestamps[email]
            
            if attempt < max_retries - 1:
                wait_time = random.uniform(60, 120)  # 1-2 –º–∏–Ω—É—Ç—ã
                logger.info(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {wait_time:.1f} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
                time.sleep(wait_time)
                continue
            else:
                return None
    
    return None

def clear_session_cache():
    """–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ —Å–µ—Å—Å–∏–π"""
    global _active_sessions, _session_timestamps
    _active_sessions.clear()
    _session_timestamps.clear()
    logger.info("üßπ –ö—ç—à —Å–µ—Å—Å–∏–π –æ—á–∏—â–µ–Ω")